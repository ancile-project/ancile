"""empty message

Revision ID: b90edae803fc
Revises: eae734b387a8
Create Date: 2019-06-13 11:21:49.524066

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'b90edae803fc'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('accounts',
    sa.Column('inserted_at', sa.TIMESTAMP(), nullable=True),
    sa.Column('updated_at', sa.TIMESTAMP(), nullable=True),
    sa.Column('id', sa.BigInteger(), nullable=False),
    sa.Column('email', sa.String(length=255), nullable=False),
    sa.Column('password', sa.String(length=255), nullable=True),
    sa.Column('active', sa.Boolean(), nullable=True),
    sa.Column('confirmed_at', sa.String(length=255), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email')
    )
    op.create_table('roles',
    sa.Column('inserted_at', sa.TIMESTAMP(), nullable=True),
    sa.Column('updated_at', sa.TIMESTAMP(), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=80), nullable=True),
    sa.Column('description', sa.String(length=255), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('schema_migrations',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(), nullable=True),
    sa.Column('version', sa.BigInteger(), nullable=False),
    sa.Column('inserted_at', sa.TIMESTAMP(), nullable=True),
    sa.PrimaryKeyConstraint('id', 'version')
    )
    op.create_table('collections',
    sa.Column('inserted_at', sa.TIMESTAMP(), nullable=True),
    sa.Column('updated_at', sa.TIMESTAMP(), nullable=True),
    sa.Column('id', sa.BigInteger(), nullable=False),
    sa.Column('user_ids', sa.ARRAY(sa.Integer()), nullable=True),
    sa.Column('app_id', sa.BigInteger(), nullable=True),
    sa.Column('policy', sa.Text(), nullable=True),
    sa.Column('active', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['app_id'], ['accounts.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('policies',
    sa.Column('inserted_at', sa.TIMESTAMP(), nullable=True),
    sa.Column('updated_at', sa.TIMESTAMP(), nullable=True),
    sa.Column('id', sa.BigInteger(), nullable=False),
    sa.Column('purpose', sa.String(length=255), server_default=sa.text('NULL::character varying'), nullable=True),
    sa.Column('policy', sa.Text(), nullable=True),
    sa.Column('active', sa.Boolean(), server_default=sa.text('false'), nullable=False),
    sa.Column('provider', sa.Text(), nullable=True),
    sa.Column('app_id', sa.BigInteger(), nullable=True),
    sa.Column('user_id', sa.BigInteger(), nullable=True),
    sa.Column('creator_id', sa.BigInteger(), nullable=True),
    sa.ForeignKeyConstraint(['app_id'], ['accounts.id'], ),
    sa.ForeignKeyConstraint(['creator_id'], ['accounts.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['accounts.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_policies_app_id'), 'policies', ['app_id'], unique=False)
    op.create_index(op.f('ix_policies_user_id'), 'policies', ['user_id'], unique=False)
    op.create_table('roles_users',
    sa.Column('account_id', sa.Integer(), nullable=True),
    sa.Column('role_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['account_id'], ['accounts.id'], ),
    sa.ForeignKeyConstraint(['role_id'], ['roles.id'], )
    )
    op.create_table('tokens',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('inserted_at', sa.TIMESTAMP(), nullable=True),
    sa.Column('updated_at', sa.TIMESTAMP(), nullable=True),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=20), nullable=False),
    sa.Column('token_type', sa.String(length=20), nullable=True),
    sa.Column('access_token', sa.String(length=256), nullable=False),
    sa.Column('refresh_token', sa.String(length=256), nullable=True),
    sa.Column('expires_at', sa.Integer(), nullable=True),
    sa.Column('data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['accounts.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('user_identities',
    sa.Column('inserted_at', sa.TIMESTAMP(), nullable=True),
    sa.Column('updated_at', sa.TIMESTAMP(), nullable=True),
    sa.Column('id', sa.BigInteger(), nullable=False),
    sa.Column('provider', sa.String(length=255), nullable=False),
    sa.Column('uid', sa.String(length=255), nullable=False),
    sa.Column('tokens', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('user_id', sa.BigInteger(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['accounts.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('user_identities_uid_provider_index', 'user_identities', ['uid', 'provider'], unique=True)
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('user_identities_uid_provider_index', table_name='user_identities')
    op.drop_table('user_identities')
    op.drop_table('tokens')
    op.drop_table('roles_users')
    op.drop_index(op.f('ix_policies_user_id'), table_name='policies')
    op.drop_index(op.f('ix_policies_app_id'), table_name='policies')
    op.drop_table('policies')
    op.drop_table('collections')
    op.drop_table('schema_migrations')
    op.drop_table('roles')
    op.drop_table('accounts')
    # ### end Alembic commands ###
